import{_ as e,p as s,q as t,a1 as a}from"./framework-5866ffd3.js";const n="/ogma-timeline-plugin//between-loose.png",i="/ogma-timeline-plugin//between-strict.png",o="/ogma-timeline-plugin//outside-loose.png",r="/ogma-timeline-plugin//outside-strict.png",c="/ogma-timeline-plugin//before-loose.png",l="/ogma-timeline-plugin//before-strict.png",p="/ogma-timeline-plugin//after-loose.png",d="/ogma-timeline-plugin//after-strict.png",h={},u=a(`<h1 id="filtering" tabindex="-1"><a class="header-anchor" href="#filtering" aria-hidden="true">#</a> Filtering</h1><p>Please refer to <a href="#filter-nodes-depending-on-time">Getting started</a> section to learn how to link timeline filtering with Ogma <code>addNodeFilter</code>.</p><p>When user drags timebars, the plugin updates the list of filtered <code>NodeId</code> depending on the passed filtering options.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FilterOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  
  strategy<span class="token operator">:</span> <span class="token string">&#39;before&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;after&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;between&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;outside&#39;</span><span class="token punctuation">;</span>
  tolerance<span class="token operator">:</span> <span class="token string">&#39;strict&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;loose&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See below how the different strategy/combination work. In case of <code>between</code>/<code>outside</code>, you can pass pairs of timebars, then each pair will be studied separatly. In case of <code>before</code>/<code>after</code>, only the fist/last timebar is considered.</p><h2 id="between-loose" tabindex="-1"><a class="header-anchor" href="#between-loose" aria-hidden="true">#</a> Between loose</h2><p><img src="`+n+'" alt="between loose"></p><h2 id="between-strict" tabindex="-1"><a class="header-anchor" href="#between-strict" aria-hidden="true">#</a> Between strict</h2><p><img src="'+i+'" alt="between strict"></p><h2 id="outside-loose" tabindex="-1"><a class="header-anchor" href="#outside-loose" aria-hidden="true">#</a> Outside loose</h2><p><img src="'+o+'" alt="outside loose"></p><h2 id="outside-strict" tabindex="-1"><a class="header-anchor" href="#outside-strict" aria-hidden="true">#</a> Outside strict</h2><p><img src="'+r+'" alt="outside strict"></p><h2 id="before-loose" tabindex="-1"><a class="header-anchor" href="#before-loose" aria-hidden="true">#</a> Before loose</h2><p><img src="'+c+'" alt="before loose"></p><h2 id="before-strict" tabindex="-1"><a class="header-anchor" href="#before-strict" aria-hidden="true">#</a> Before strict</h2><p><img src="'+l+'" alt="before strict"></p><h2 id="after-loose" tabindex="-1"><a class="header-anchor" href="#after-loose" aria-hidden="true">#</a> After loose</h2><p><img src="'+p+'" alt="after loose"></p><h2 id="after-strict" tabindex="-1"><a class="header-anchor" href="#after-strict" aria-hidden="true">#</a> After strict</h2><p><img src="'+d+'" alt="after strict"></p>',21),f=[u];function g(m,b){return s(),t("div",null,f)}const k=e(h,[["render",g],["__file","filtering.html.vue"]]);export{k as default};
