import{_ as t,M as p,p as e,q as o,R as n,t as s,N as c,a1 as i}from"./framework-5866ffd3.js";const l="/ogma-timeline-plugin/style-grouping-timeline.png",u={},r=i(`<h1 id="grouping" tabindex="-1"><a class="header-anchor" href="#grouping" aria-hidden="true">#</a> Grouping</h1><p>Barchart automatically groups data by date, depending on zoom, but you can specify a <code>groupIdFunction</code> to make it group together nodes with different data. Let&#39;s say you have two types of nodes: persons and cars, like this:</p><h2 id="groupidfunction" tabindex="-1"><a class="header-anchor" href="#groupidfunction" aria-hidden="true">#</a> GroupIdFunction</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ogma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ogma</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">&quot;ogma&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">graph</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nodes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">1 1 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1950</span> <span class="token operator">+</span> id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">1 6 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1950</span> <span class="token operator">+</span> id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">edges</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

## GroupIdFunction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, the timeline will render all nodes without distinction. You can split different types of nodes by passing <code>groupIdFunction</code> to the timeline:</p><p>You can then pass a <code>groupIdFunction</code> that will create bars for cars and bars for persons.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  barchart<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">groupIdFunction</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  timeline<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">groupIdFunction</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="itemgenerator" tabindex="-1"><a class="header-anchor" href="#itemgenerator" aria-hidden="true">#</a> ItemGenerator</h2><p>By default the timeline will set <code>Node-\${id}</code> as labels for each element. But you might want to display different names, you can do that with <code>itemGenerator</code> function:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> timeline<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">itemGenerator</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token keyword">as</span> Node<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token operator">?.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k=n("code",null,"itemGenerator",-1),d=n("code",null,"groupIdFunction",-1),m=n("code",null,"groupId",-1),g=n("code",null,"groupIdFunction",-1),v={href:"/styling",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"result",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#result","aria-hidden":"true"},"#"),s(" Result")],-1),b=n("p",null,[n("img",{src:l,alt:"Result"})],-1);function h(f,_){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[s("Now with both "),k,s(" and "),d,s(", your timeline shows one row for each node type and proper labels. Items within a group will have a class corresponding to the "),m,s(" return by "),g,s(". You can use it to style your items. See "),n("a",v,[s("styling"),c(a)])]),y,b])}const I=t(u,[["render",h],["__file","grouping.html.vue"]]);export{I as default};
