import{_ as p,M as o,p as i,q as c,R as s,t as n,N as t,a1 as a}from"./framework-5866ffd3.js";const l={},u=a(`<h1 id="styling" tabindex="-1"><a class="header-anchor" href="#styling" aria-hidden="true">#</a> Styling</h1><p>Now that you have a working timeline, you might want to make it look neat, and to sync it with the visualisation.</p><h2 id="barchart-styling" tabindex="-1"><a class="header-anchor" href="#barchart-styling" aria-hidden="true">#</a> Barchart styling</h2><p>The simplest way to style barchart is to set <code>fill</code> and <code>stroke</code> properties in CSS:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bar-item</span><span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #ff9914<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> #ff9914<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you specified a <code>groupIdFunction</code>, then your groups will have the same class as the id returned by your groupIdFunction. Let&#39;s say groupIdFunction returns either <code>car</code> either <code>person</code>, then you can style <code>car</code> and <code>person</code> bars like this</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bar-item.car</span><span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #99ff14<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> #99ff14<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.bar-item.person</span><span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #14ff99<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> #14ff99<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r={href:"https://visjs.github.io/vis-timeline/docs/graph2d/#Configuration_Options",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  barchart<span class="token operator">:</span> <span class="token punctuation">{</span>
    graph2dOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      barChart<span class="token operator">:</span><span class="token punctuation">{</span> sideBySide<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// here pass more options if you like</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">groupIdFunction</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linechart-styling" tabindex="-1"><a class="header-anchor" href="#linechart-styling" aria-hidden="true">#</a> Linechart styling</h2><p>You can get the barchart to display lines by setting the <code>style</code> key to <code>line</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  barchart<span class="token operator">:</span> <span class="token punctuation">{</span>
    graph2dOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      style<span class="token operator">:</span> <span class="token string">&#39;line&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then styling of the lines is as follows:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.vis-group</span><span class="token punctuation">{</span>
  <span class="token property">fill-opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.vis-group.person</span><span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #99ff14<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="timeline-styling" tabindex="-1"><a class="header-anchor" href="#timeline-styling" aria-hidden="true">#</a> Timeline styling</h2><p>Timeline styling follows the same rules as the other charts, elements get classes depending on their group, and you can use it to stlye them. They also get as a class the <strong>nodeId</strong> of the node they represent. You can customize the names of the items with the <code>itemGenerator</code> function.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  timeline<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">groupIdFunction</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">itemGenerator</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ogma<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>nodeI<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>nodeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    timelineOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//here pass more options if you like</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.timeline-item.car</span> <span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #99ff14<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> #99ff14<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.timeline-item.car.vis-selected</span> <span class="token punctuation">{</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #CCff55<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> #CCff55<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k={href:"https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"timelineOptions",-1),m=a(`<h2 id="legend" tabindex="-1"><a class="header-anchor" href="#legend" aria-hidden="true">#</a> Legend</h2><p>To get the legend on barchart, you can simply pass the <code>legend</code> key</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  barchart<span class="token operator">:</span> <span class="token punctuation">{</span>
    graph2dOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      legend<span class="token operator">:</span> <span class="token punctuation">{</span>left<span class="token operator">:</span><span class="token punctuation">{</span>position<span class="token operator">:</span><span class="token string">&quot;bottom-left&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function g(h,b){const e=o("ExternalLinkIcon");return i(),c("div",null,[u,s("p",null,[n("To go further into barchart customization, you can pass "),s("a",r,[n("options"),t(e)]),n(" within the controller:")]),d,s("p",null,[n("To go further into customization, pass "),s("a",k,[n("options"),t(e)]),n(" in the "),v,n(" key.")]),m])}const f=p(l,[["render",g],["__file","styling.html.vue"]]);export{f as default};
