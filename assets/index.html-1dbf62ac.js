import{_ as o,M as p,p as i,q as c,R as n,t as s,N as e,a1 as t}from"./framework-5866ffd3.js";const l={},u=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),s(" Getting Started")],-1),r={href:"https://doc.linkurio.us/ogma/latest/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://doc.linkurious.com/ogma/latest/examples/timeline.html",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"installation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),s(" Installation")],-1),m=n("strong",null,"Ogma",-1),g={href:"https://doc.linkurio.us/ogma/latest/support.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest
<span class="token builtin class-name">cd</span> my-ogma-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="install-ogma-and-ogma-timeline-plugin" tabindex="-1"><a class="header-anchor" href="#install-ogma-and-ogma-timeline-plugin" aria-hidden="true">#</a> Install Ogma and Ogma-timeline-plugin</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @linkurious/ogma @linkurious/ogma-timeline-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="use-ogma-timeline-plugin-in-your-app" tabindex="-1"><a class="header-anchor" href="#use-ogma-timeline-plugin-in-your-app" aria-hidden="true">#</a> Use Ogma-timeline-plugin in your App</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Ogma <span class="token keyword">from</span> <span class="token string">&quot;@linkurious/ogma&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Controller <span class="token keyword">as</span> TimelinePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@linkurious/ogma-timeline-plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ogma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ogma</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  container<span class="token operator">:</span> <span class="token string">&#39;graph-container&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timelineContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;timeline&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLDivElement<span class="token punctuation">;</span>
<span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it ! You have a fully functionnal Ogma instance within your app, and a timeline showing your data.</p><h2 id="get-the-timestamps-on-your-nodes-and-edges" tabindex="-1"><a class="header-anchor" href="#get-the-timestamps-on-your-nodes-and-edges" aria-hidden="true">#</a> Get the timestamps on your nodes and edges</h2><p>By default the plugin looks for <code>start</code> and <code>end</code> keys within node data, and uses it to generate the timeline. If you store your data within the <code>creation.date</code> and <code>deletion.date</code> keys for instance, then you can pass <code>nodeStartPath</code> and <code>nodeEndPath</code> properties to the Controller constructor:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  nodeStartPath<span class="token operator">:</span> <span class="token string">&#39;creation.date&#39;</span><span class="token punctuation">,</span>
  nodeEndPath<span class="token operator">:</span> <span class="token string">&#39;deletion.date&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If some of your data does not have an <code>end</code> date, no worries, the plugin deals with <code>undefined</code> end dates. Though start date are <strong>mandatory</strong>.</p><h2 id="filter-nodes-and-edges-depending-on-time" tabindex="-1"><a class="header-anchor" href="#filter-nodes-and-edges-depending-on-time" aria-hidden="true">#</a> Filter nodes and edges depending on time</h2><p>The plugin provides a simple API to filter out nodes depending on user&#39;s input:</p>`,12),h=n("li",null,"add some timeBars to the controller",-1),b={href:"https://doc.linkurious.com/ogma/latest/api.html#Ogma-transformations-addNodeFilter",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"Link it to the timeline events",-1),y=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> timelinePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelinePlugin</span><span class="token punctuation">(</span>ogma<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  timeBars<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// place the bars at now and 01/01/70 to start</span>
        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">//configure filtering</span>
  nodeFilter<span class="token operator">:</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    strategy<span class="token operator">:</span> <span class="token string">&#39;between&#39;</span><span class="token punctuation">,</span>
    tolerance<span class="token operator">:</span> <span class="token string">&#39;loose&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  edgeFilter<span class="token operator">:</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    strategy<span class="token operator">:</span> <span class="token string">&#39;between&#39;</span><span class="token punctuation">,</span>
    tolerance<span class="token operator">:</span> <span class="token string">&#39;loose&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//create filters</span>
<span class="token keyword">const</span> nodeFilter <span class="token operator">=</span> ogma<span class="token punctuation">.</span>transformations<span class="token punctuation">.</span><span class="token function">addNodeFilter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">criteria</span><span class="token operator">:</span> node <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> controller<span class="token punctuation">.</span>filteredNodes<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> edgeFilter <span class="token operator">=</span> ogma<span class="token punctuation">.</span>transformations<span class="token punctuation">.</span><span class="token function">addEdgeFilter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">criteria</span><span class="token operator">:</span> edge <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> controller<span class="token punctuation">.</span>filteredEdges<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//Hook it to the timeline events</span>
controller<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;timechange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  nodeFilter<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  edgeFilter<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=n("strong",null,"one",-1),_=n("strong",null,"multiple of two",-1),x={href:"/filtering",target:"_blank",rel:"noopener noreferrer"},E=t(`<h2 id="update-the-timeline-on-graph-changes" tabindex="-1"><a class="header-anchor" href="#update-the-timeline-on-graph-changes" aria-hidden="true">#</a> Update the timeline on graph changes</h2><p>When you create the timeline, it gets all the nodes within the vizualisation and saves their ids. Then the timeline will show only thoose nodes, but your graph might evolve with time, some nodes might be created/deleted. In that case, you need to hook on Ogma&#39;s events to refresh the timeline:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>ogma<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;addNodes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addEdges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;removeNodes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;removeEdges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clearGraph&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  timeline<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nodes<span class="token operator">:</span> ogma<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edges<span class="token operator">:</span> ogma<span class="token punctuation">.</span><span class="token function">getEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="display-only-edges-or-only-nodes" tabindex="-1"><a class="header-anchor" href="#display-only-edges-or-only-nodes" aria-hidden="true">#</a> Display only edges, or only nodes</h2><p>If you just want to show nodes within your timeline, just call:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  timeline<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nodes<span class="token operator">:</span> ogma<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to show just edges, call:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  timeline<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span>edges<span class="token operator">:</span> ogma<span class="token punctuation">.</span><span class="token function">getEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function I(P,F){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("Ogma-Timeline-Plugin for "),n("a",r,[s("Ogma"),e(a)]),s(".")]),n("p",null,[n("a",d,[s("demo"),e(a)])]),k,n("p",null,[s("First, you need to own a valid "),m,s(" licence. Reach out "),n("a",g,[s("Ogma sales"),e(a)]),s(" for more details. Let's say you start from scratch:")]),v,n("ul",null,[h,n("li",null,[s("create an ogma "),n("a",b,[s("nodeFilter"),e(a)])]),f]),y,n("p",null,[s("You can place as many bars as you want, but please place either "),w,s(" or a "),_,s(" bars. There are many filtering options availiable, please have a look at the "),n("a",x,[s("filtering"),e(a)]),s(" section for more details.")]),E])}const O=o(l,[["render",I],["__file","index.html.vue"]]);export{O as default};
